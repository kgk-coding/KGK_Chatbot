# src/app.py
import streamlit as st
from rag_chain import retrieve_answer
from ingest import create_chroma_db
import os
import chromadb


# DEBUG: VeritabanÄ± kayÄ±t sayÄ±sÄ±nÄ± logla
client = chromadb.PersistentClient(path="chroma_db")
collection = client.get_or_create_collection("kgk_chatbot")
print(f"DEBUG >>> ChromaDB kayÄ±t sayÄ±sÄ±: {collection.count()}")

# Sayfa ayarlarÄ±
st.set_page_config(page_title="KÃ¶ksal GÃ¼rkan KoÃ§luk Chatbot", page_icon="ğŸ’¬")

# BaÅŸlÄ±k ve aÃ§Ä±klama
st.title("ğŸ’¬ KÃ¶ksal GÃ¼rkan KoÃ§luk Chatbot")
st.write(
    "Merhaba ğŸ‘‹ Ben KÃ¶ksal GÃ¼rkan KoÃ§luk iÃ§in oluÅŸturulmuÅŸ koÃ§luk odaklÄ± Chatbot'um. "
    "KoÃ§lukla ilgili temel bilgiler, sÃ¼reÃ§ler, akÄ±ÅŸ, koÃ§luÄŸa uygunluk ve benzeri konularda merak ettiklerini sorabilirsin."
)

# ChromaDB dizin yolu
PERSIST_DIR = os.path.join("chroma_db")

# ğŸ”¹ Her zaman ChromaDB kontrolÃ¼ (boÅŸsa yeniden oluÅŸturur)
if not os.path.exists(PERSIST_DIR) or not os.listdir(PERSIST_DIR):
    with st.spinner("Veri tabanÄ± hazÄ±rlanÄ±yor..."):
        create_chroma_db()
    st.success("Veri tabanÄ± oluÅŸturuldu. âœ…")


# ğŸ”¹ KullanÄ±cÄ±dan soru al
user_q = st.text_input("Sorunuzu yazÄ±n:", key="user_input")

if st.button("CevabÄ± GÃ¶ster"):
    if user_q.strip():
        with st.spinner("DÃ¼ÅŸÃ¼nÃ¼yorum..."):
            try:
                answer = retrieve_answer(user_q)
                st.markdown(answer)
            except Exception as e:
                st.error(f"Bir hata oluÅŸtu: {e}")
    else:
        st.warning("LÃ¼tfen bir soru yazÄ±n.")

st.markdown("---")
st.caption("Bu uygulama, KÃ¶ksal GÃ¼rkan KoÃ§luk web sitesine dayalÄ± Ã¶rnek bir RAG tabanlÄ± chatbot projesidir.")
