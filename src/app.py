# src/app.py

import streamlit as st
import os
import chromadb
from src.ingest import create_chroma_db, debug_print_collection_info
from rag_chain import retrieve_answer

st.set_page_config(page_title="KÃ¶ksal GÃ¼rkan KoÃ§luk Chatbot", page_icon="ğŸ’¬")

st.title("ğŸ’¬ KÃ¶ksal GÃ¼rkan KoÃ§luk Chatbot")
st.write(
    "Merhaba ğŸ‘‹ Ben KÃ¶ksal GÃ¼rkan KoÃ§luk iÃ§in oluÅŸturulmuÅŸ koÃ§luk odaklÄ± Chatbot'um. "
    "KoÃ§lukla ilgili temel bilgiler, sÃ¼reÃ§ler, akÄ±ÅŸ, koÃ§luÄŸa uygunluk ve benzeri konularda merak ettiklerini sorabilirsin."
)

PERSIST_DIR = os.path.join("chroma_db")

# Veri tabanÄ± yoksa veya boÅŸsa oluÅŸtur (sessiz, kullanÄ±cÄ±ya mesaj gÃ¶sterme istemiyorsun)
if not os.path.exists(PERSIST_DIR) or not os.listdir(PERSIST_DIR):
    with st.spinner("VeritabanÄ± hazÄ±rlanÄ±yor..."):
        create_chroma_db()
# (Bilgi mesajÄ± gÃ¶stermiyoruz - talebine gÃ¶re gizledim)

st.markdown("---")


# DEBUG bÃ¶lÃ¼mÃ¼ (isteÄŸe baÄŸlÄ±) - sadece geliÅŸtirirken aktifleÅŸtir
with st.expander("GeliÅŸtirici / Debug Kontrolleri (isteÄŸe baÄŸlÄ±)"):
    if st.button("VeritabanÄ± bilgilerini gÃ¶ster"):
        info = debug_print_collection_info()
        st.json(info)
    st.write("Not: Bu paneli test bitince kaldÄ±rabilirsin.")

st.markdown("---")


# KullanÄ±cÄ± giriÅŸi
user_q = st.text_input("Sorunuzu yazÄ±n:", key="user_input")

if st.button("CevabÄ± GÃ¶ster"):
    if user_q.strip():
        with st.spinner("DÃ¼ÅŸÃ¼nÃ¼yorum..."):
            try:
                answer = retrieve_answer(user_q)
                st.markdown(answer)
            except Exception as e:
                st.error(f"Bir hata oluÅŸtu: {e}")
    else:
        st.warning("LÃ¼tfen bir soru yazÄ±n.")

st.markdown("---")
st.caption("Bu uygulama, KÃ¶ksal GÃ¼rkan KoÃ§luk web sitesine dayalÄ± Ã¶rnek bir RAG tabanlÄ± chatbot projesidir.")
